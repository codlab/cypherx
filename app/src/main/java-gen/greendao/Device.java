package greendao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;

import eu.codlab.crypto.core.utils.Base64Coder;
import eu.codlab.crypto.core.utils.Constants;
import eu.codlab.cypherx.ApplicationController;
import eu.codlab.cypherx.database.MessagesController;
// KEEP INCLUDES END

/**
 * Entity mapped to table DEVICE.
 */
public class Device {

    private Long id;
    /**
     * Not-null value.
     */
    private String guid;
    /**
     * Not-null value.
     */
    private String key;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Device() {
    }

    public Device(Long id) {
        this.id = id;
    }

    public Device(Long id, String guid, String key) {
        this.id = id;
        this.guid = guid;
        this.key = key;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Not-null value.
     */
    public String getGuid() {
        return guid;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setGuid(String guid) {
        this.guid = guid;
    }

    /**
     * Not-null value.
     */
    public String getKey() {
        return key;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setKey(String key) {
        this.key = key;
    }

    // KEEP METHODS - put your custom methods here
    private PublicKey _public_key;
    private Message _last_message;

    public Message getLastMessage() {
        if (_last_message == null) {
            _last_message = MessagesController.getInstance(ApplicationController.getInstance())
                    .getLastMessage(this);
            if(_last_message == null) {
                _last_message = new Message();
            }
        }
        return _last_message;
    }

    public PublicKey getPublicKey() {
        try {
            if (_public_key == null) {
                byte[] encodedPublicKey = Base64Coder.decode(getKey());

                KeyFactory keyFactory = KeyFactory.getInstance(Constants.ALGORITHM);
                X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(encodedPublicKey);
                _public_key = keyFactory.generatePublic(publicKeySpec);
            }
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            e.printStackTrace();
        }

        return _public_key;
    }

    public Long getCountMessages() {
        return MessagesController.getInstance(ApplicationController.getInstance())
                .getMessagesCount(this);
    }

    // KEEP METHODS END

}
