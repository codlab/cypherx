package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGE.
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Device_guid = new Property(1, String.class, "device_guid", false, "DEVICE_GUID");
        public final static Property Encrypted_content = new Property(2, String.class, "encrypted_content", false, "ENCRYPTED_CONTENT");
        public final static Property Encrypted_content_local = new Property(3, String.class, "encrypted_content_local", false, "ENCRYPTED_CONTENT_LOCAL");
        public final static Property Received_at = new Property(4, java.util.Date.class, "received_at", false, "RECEIVED_AT");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property Signature = new Property(6, String.class, "signature", false, "SIGNATURE");
    };


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DEVICE_GUID' TEXT NOT NULL ," + // 1: device_guid
                "'ENCRYPTED_CONTENT' TEXT NOT NULL ," + // 2: encrypted_content
                "'ENCRYPTED_CONTENT_LOCAL' TEXT," + // 3: encrypted_content_local
                "'RECEIVED_AT' INTEGER NOT NULL ," + // 4: received_at
                "'TYPE' INTEGER NOT NULL ," + // 5: type
                "'SIGNATURE' TEXT);"); // 6: signature
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDevice_guid());
        stmt.bindString(3, entity.getEncrypted_content());
 
        String encrypted_content_local = entity.getEncrypted_content_local();
        if (encrypted_content_local != null) {
            stmt.bindString(4, encrypted_content_local);
        }
        stmt.bindLong(5, entity.getReceived_at().getTime());
        stmt.bindLong(6, entity.getType());
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(7, signature);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // device_guid
            cursor.getString(offset + 2), // encrypted_content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // encrypted_content_local
            new java.util.Date(cursor.getLong(offset + 4)), // received_at
            cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // signature
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDevice_guid(cursor.getString(offset + 1));
        entity.setEncrypted_content(cursor.getString(offset + 2));
        entity.setEncrypted_content_local(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReceived_at(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setType(cursor.getInt(offset + 5));
        entity.setSignature(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
